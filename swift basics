import UIKit
//creating arrays and printing them using concatination
print("CREATING ARRAYS")
print()
var songs = ["Shake it Off", "You Belong with Me", "Back to December"]
var a = songs[0]
var b = songs[1]

print("1.",a+" "+b)
print()

//creating dictionaries
print("DICTIONARY")
print()
var person = ["first": "Taylor", "middle": "Alison", "last": "Swift", "month": "December", "website": "taylorswift.com"]
person["middle"]
person["month"]

print("1. \(person["first"] ?? <#default value#>)","\(person["middle"] ?? <#default value#>)","\(person["last"] ?? <#default value#>)","was born on","\(person["month"] ?? <#default value#>)") //here the ?? lets user to print non optionl values which when results to nil and assigns specified value here the specified value in default value
print()
print("2. Person is \(String(describing:person))")//For debugging purposes, all types can benefit from being representable as a string.
print()
//creating Conditional Statements
print("CONDITIONAL STATEMENT-1")
print()
var action: String
var per = "hater"

if per == "hater" {
    action = "hate"
} else if per == "player" {
    action = "play"
} else {
    action = "cruise"
}
print(per)
print()

print("CONDITIONAL STATEMENT-2")
var stayOutTooLate = true
var nothingInBrain = true

if stayOutTooLate && nothingInBrain {
    action = "cruise"
}

print(action)
print()
//for loop
print("FOR LOOP 1")
//1
for i in 1...10 {
    print("\(i) x 10 is \(i * 10)")
}
print()
//2
print("FOR LOOP 2")

var str = "Fakers gonna"

for _ in 1 ... 5 {
    str += " fake"
}

print(str)
print()
//3
print("FOR LOOP 3")
print()
var people = ["players", "haters", "heart-breakers", "fakers"]
var actions = ["play", "hate", "break", "fake"]

for i in 0 ... 3 {
    print("\(people[i]) gonna \(actions[i])")
}
print()
//Nested loop
print("NESTED LOOP")
print()
var peop = ["players", "haters", "heart-breakers", "fakers"]
var act = ["play", "hate", "break", "fake"]

for i in 0 ..< people.count {
    var str = "\(people[i]) gonna"

    for _ in 1 ... 5 {
        str += " \(actions[i])"
    }

    print(str)
}
print()
print("WHILE LOOP")
print()
var counter = 0

while true {
    print("Counter is now \(counter)")
    counter += 1

    if counter == 10 {
        break
    }
}
print()
print("SWITCH CASE")
print()
let liveAlbums = 2

switch liveAlbums {
case 0:
    print("You're just starting out")

case 1:
    print("You just released iTunes Live From SoHo")

case 2:
    print("You just released Speak Now World Tour")

default:
    print("Have you done something new?")
}
print()
//creating a function and deploying switch case
print("CREATING FUNCTION AND DEPLOYING SWITCH CASE")
print()
func albumReleased(year: Int) -> String? //arrow specifies function type "?" means optional...
{
    switch year {
    case 2006: return "Taylor Swift"
    case 2008: return "Fearless"
    case 2010: return "Speak Now"
    case 2012: return "Red"
    case 2014: return "1989"
    default: return nil
    }
}

let album = albumReleased(year: 2006)?.uppercased()
print("The album is \(String(describing: album))")
print()
print("EXTERNAL & INTERNAL PARAMETERS (type 1)")
print()
func countLettersInString(string: String) {
    print("The string \(string) has \(string.count) letters.")
}
countLettersInString(string: "Hello World !")
print()
print("EXTERNAL & INTERNAL PARAMETERS (type 2)")
func countLettersInString(myString str: String) {
    print("The string \(str) has \(str.count) letters.")
}

countLettersInString(myString: "Hello")
print()
//Externally the func. is called as my strings and internally it is called as str
print()
print("External naming")
print()
func countLetters(in string: String) {
    print("The string \(string) has \(string.count) letters.")
}
countLetters(in: "Hello")
//Here in is used to pass value to the parameter, in with for such keywords can also be used instead
print()
print("RETERUN VALUE")
print()
func albumIsTaylor(name: String) -> Bool {
    if name == "Taylor Swift" { return true }
    if name == "Fearless" { return true }
    if name == "Speak Now" { return true }
    if name == "Red" { return true }
    if name == "1989" { return true }

    return false
}
print()
print("OPTIONALS")
print("1.")
func getHaterStatus(weather: String) -> String? { //here since ? is used the output can be either a string or any other value but a string value is most preferred
    if weather == "sunny" {
        return nil
    } else {
        return "Hate"
    }
}
//function calling is further done

status = getHaterStatus(weather: "rainy") ?? <#default value#>
print(status)
print()
print("2.")
//creating an array
var items = ["James", "John", "Sally"]
var status: String
//creating a function to find position
func position(of string: String, in array: [String]) -> Int { //here parameter one is of and another is in with string and string as array as type with int as optional
    for i in 0 ..< array.count {
        if array[i] == string {
            return i
        }
    }

    return 0
}
//function calling
let jamesPosition = position(of: "James", in: items)
let johnPosition = position(of: "John", in: items)
let sallyPosition = position(of: "Sally", in: items)
let bobPosition = position(of: "Bob", in: items)
print(jamesPosition,jamesPosition,sallyPosition,bobPosition)
print()
print("OPTIONAL CHAINING")
func albumRelease(year: Int) -> String? {
    switch year {
    case 2006: return "Taylor Swift"
    case 2008: return "Fearless"
    case 2010: return "Speak Now"
    case 2012: return "Red"
    case 2014: return "1989"
    default: return nil
    }
}

let albu = albumRelease(year: 2006)
print("The album is \(albu ?? <#default value#>)")
let alb = albumRelease(year: 2006)?.uppercased()
print("The album is \(alb ?? <#default value#>)")
let al = albumRelease(year: 2005) ?? "unknown"
print("The album is \(al)")
print()

